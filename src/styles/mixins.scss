// layout-based & helper css mixins. type-based mixins in ./type.scss

// HELPERS
// fix css max, override scss min / max
@function max($values...) {
  @return m#{a}x(#{$values});
}

// fix css min, override scss min / max
@function min($values...) {
  @return m#{i}n(#{$values});
}

// return unitless value
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// convert straight number to percentage
@function make-percentage($number) {
  @if type-of($number) == 'number' and unitless($number) {
    @return percentage($number / $grid-column-count);
  }

  @return $number;
}

// GENERIC css fit to relative parent 
@mixin  fit($position: absolute) {
  position: $position;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

// GRID
// parent grid to layout items along a grid
@mixin grid($direction: ltr, $grid-row-gap: 0, $grid-column-gap: var(--gutter)) {
  // linear until $min-mobile, gives space for gap to not overflow
  display: grid;
  align-items: flex-start;
  gap: $grid-row-gap 0;
  grid-template-rows: auto;
  grid-template-columns: repeat($grid-column-count, minmax(0, 1fr));

  flex: none;
  width: 100%;

  direction: $direction;

  // mq should be more like ($grid-gutter (px value, not custom prop!) * $grid-column-count)
  @media (min-width: $min-mobile) {
    gap: $grid-row-gap $grid-column-gap;
  }
}

// individual column. use @include grid-item(5) where number = column span
@mixin grid-item($col-width: $grid-column-count, $offset: 0) {
  @if ($col-width > $grid-column-count) {
    $col-width: $grid-column-count;
  }

  @if ($offset > 0) {
    grid-column: ($offset + 1) / span #{$col-width};
  }
  
  @else {
    grid-column: span $col-width;
  }
}

// <Container>: center & left/right pad elements
@mixin container($fluid: false) {
  flex-grow: 1;

  margin: 0 auto;
  padding-left: $container-gutter-mobile;
  padding-right: $container-gutter-mobile;

  width: 100%;
  
  @if $fluid == false {
    max-width: $page-width + $container-gutter-mobile * 2;
  }
  
  @supports (--css: variables) {
    padding-left: var(--container-gutter);
    padding-right: var(--container-gutter);

    @if $fluid == false {
      max-width: calc(#{$page-width} + var(--container-gutter) * 2);
    }
  }
}

// <Section>: full-width; top & bottom padding for a section component. usually direct parent of <Container />
@mixin section(
  $padding-top: $section-padding,
  $padding-bottom: $section-padding,
  $padding-top-mobile: $section-padding-mobile,
  $padding-bottom-mobile: $section-padding-mobile) {
  flex: none;

  // Set up unitless values
  $top-mobile: strip-unit($padding-top-mobile);
  $bottom-mobile: strip-unit($padding-bottom-mobile);
  $top: strip-unit($padding-top);
  $bottom: strip-unit($padding-bottom);

  padding-top: $top-mobile * 1px;
  padding-bottom: $bottom-mobile * 1px;

  width: 100%;

  overflow: hidden;

    // todo: clamp() should fallback to max(min, max) & then percentage between tablet & limit;

  @supports (padding: clamp(1px, 1%, 2px)) {
    padding-top: clamp($top-mobile * 1px, percentage(($top * 1px) / $page-width), $top * 1px);
    padding-bottom: clamp($bottom-mobile * 1px, percentage(($bottom * 1px) / $page-width), $bottom * 1px);
  }

  @supports not (padding: clamp(1px, 1%, 2px)) {
    @media (min-width: $min-desktop) {
      padding-top: $top * 1px;
      padding-bottom: $bottom * 1px;
    }
  }
}

// BUTTON styles. used in input[type="button"] and the <Button /> component
@mixin button {
  @if variable-exists(font-size-button-min) and variable-exists(font-size-button) {
    @include responsive-font($font-size-button-min, $font-size-button);
  }

  display: inline-flex;
  align-items: center;
  justify-content: center;

  padding: calc(var(--gutter) * 0.5) var(--gutter);

  @if variable-exists(button-width) {
    width: $button-width;
  }

  @if variable-exists(button-height) {
    min-height: $button-height;
  }

  max-width: 100%;

  border-radius: 3px;

  font-weight: 700;
  line-height: 1.1;
  text-decoration: none;

  appearance: none;

  background-color: var(--color-primary);
  color: #fff;

  &.disabled,
  &:disabled {
    cursor: default;
    pointer-events: none;

    opacity: 0.5;
  }
}

// generic text-type input styles
@mixin input-defaults {
  display: inline-block;

  padding-left: 0.5ch;
  padding-right: 0.5ch;
  padding-top: 0;
  padding-bottom: 0;

  border: 1px solid var(--color-border);

  @if variable-exists(input-height) {
    display: inline-flex;
    align-items: center;

    height: $input-height;
  }

  &:disabled {
    color: var(--color-disabled, rgba($color-font, 0.6));
  }

}