//HELPERS 

// fix css max, override scss min / max
@function max($values...) {
  @return m#{a}x(#{$values});
}

// fix css min, override scss min / max
@function min($values...) {
  @return m#{i}n(#{$values});
}

// return unitless value
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// convert straight number to percentage
@function make-percentage($number) {
  @if type-of($number) == 'number' and unitless($number) {
    @return percentage($number / $grid-column-count);
  }

  @return $number;
}

// css fit position 
@mixin  fit($position: absolute) {
  position: $position;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

// RESPONSIVE FONT

// scale font-size according to viewport
@mixin responsive-font($min-size: $font-size-min, $max-size: $font-size, $viewport-min: 480px, $viewport-max: $page-width) {

  $min: strip-unit($min-size);
  $max: strip-unit($max-size);
  $v-min: strip-unit($viewport-min);
  $v-max: strip-unit($viewport-max);

  $fluid-size:
    calc(#{$min * 1px}
    + #{$max - $min}
    * (100vw - #{$viewport-min}) / (#{$v-max} - #{$v-min}));

  font-size: $min * 1px;

  @supports (font-size: clamp(1px, 2px, 3px)) {
    font-size: clamp(#{$min * 1px}, $fluid-size, #{$max * 1px});
  }

  @supports not (font-size: clamp(1px, 2px, 3px)) {
    @media (min-width: $min-desktop) {
      font-size: $max * 1px;
    }
  }
}

// GRID
// grid row wrapper
@mixin grid($direction: ltr, $grid-gutter: var(--gutter)) {
  // linear until $min-mobile, gives space for gap to not overflow

  display: grid;
  align-items: flex-start;
  justify-items: start;
  gap: $grid-gutter 0;
  grid-template-columns: 1fr;

  // mq should be more like ($grid-gutter (px value, not custom prop!) * $grid-column-count)
  @media (min-width: $min-mobile) {
    gap: $grid-gutter;

    grid-template-columns: repeat($grid-column-count, minmax(0, 1fr));
    grid-template-rows: auto;
  
    flex: none;
    width: 100%;
  
    direction: $direction;
  }
}

// individual column
@mixin grid-item($col-width: $grid-column-count, $offset: 0) {
  @if ($offset > 0) {
    grid-column: ($offset + 1) / span #{$col-width};
  }
  @else {
    grid-column: span $col-width;
  }
}

// <Container>: center & left/right pad elements
@mixin container($fluid: false) {
  flex-grow: 1;

  margin: 0 auto;
  padding-left: $container-gutter-mobile;
  padding-right: $container-gutter-mobile;

  width: 100%;
  
  @if $fluid == false {
    max-width: $page-width + $container-gutter-mobile * 2;
  }
  
  @supports (--css: variables) {
    padding-left: var(--container-gutter);
    padding-right: var(--container-gutter);

    @if $fluid == false {
      max-width: calc(#{$page-width} + var(--container-gutter) * 2);
    }
  }
}

// <Section>: top & bottom padding
@mixin section( $padding-top: $section-padding, $padding-bottom: $section-padding, $padding-top-mobile: $section-padding-mobile, $padding-bottom-mobile: $section-padding-mobile) {
  flex: none;

// Set up unitless values
  $top-mobile: strip-unit($padding-top-mobile);
  $bottom-mobile: strip-unit($padding-bottom-mobile);
  $top: strip-unit($padding-top);
  $bottom: strip-unit($padding-bottom);

  padding-top: $top-mobile * 1px;
  padding-bottom: $bottom-mobile * 1px;

  width: 100%;

  overflow: hidden;

  @supports (padding: clamp(1px, 1%, 2px)) {
    padding-top: clamp($top-mobile * 1px, percentage(($top * 1px) / $page-width), $top * 1px);
    padding-bottom: clamp($bottom-mobile * 1px, percentage(($bottom * 1px) / $page-width), $bottom * 1px);
  }

  @supports not (padding: clamp(1px, 1%, 2px)) {
    @media (min-width: $min-desktop) {
      padding-top: $top * 1px;
      padding-bottom: $bottom * 1px;
    }
  }
}