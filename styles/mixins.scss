// fix css max / min, override scss min / max
@function max($values...) {
  @return m#{a}x(#{$values});
}

@function min($values...) {
  @return m#{i}n(#{$values});
}

// return unitless value
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// scale font-size according to viewport
@mixin responsive-font(
  $min-size: $font-size-min,
  $max-size: $font-size,
  $viewport-min: 480px,
  $viewport-max: $page-width) {

  $min: strip-unit($min-size);
  $max: strip-unit($max-size);
  $v-min: strip-unit($viewport-min);
  $v-max: strip-unit($viewport-max);

  $fluid-size:
    calc(#{$min * 1px}
    + #{$max - $min}
    * (100vw - #{$viewport-min}) / (#{$v-max} - #{$v-min}));

  font-size: $max * 1px;

  @supports (font-size: clamp(1px, 2px, 3px)) {
    font-size: clamp(#{$min * 1px}, $fluid-size, #{$max * 1px});
  }
}

// center & left/right pad elements
@mixin container($fluid: false) {
  flex-grow: 1;

  margin: 0 auto;
  padding-left: $container-gutter-mobile;
  padding-right: $container-gutter-mobile;
  
  @if $fluid == false {
    max-width: $page-width + $container-gutter-mobile * 2;
  }
  
  @supports (--css: variables) {
    padding-left: var(--container-gutter);
    padding-right: $container-gutter-mobile;

    @if $fluid == false {
      max-width: calc(#{$page-width} + var(--container-gutter) * 2);
    }
  }

  width: 100%;


  @media (min-width: $min-tablet) {
    padding-left: $container-gutter-tablet;
    padding-right: $container-gutter-tablet;
  }

  @media (min-width: $min-desktop) {
    padding-left: $container-gutter-desktop;
    padding-right: $container-gutter-desktop;
  }
}

// Section top & bottom padding
@mixin section(
  $padding-top: $section-padding,
  $padding-bottom: $section-padding,
  $padding-top-mobile: $section-padding-mobile,
  $padding-bottom-mobile: $section-padding-mobile) {

  flex: none;
  width: 100%;

// Set up unitless values
  $top-mobile: strip-unit($padding-top-mobile);
  $bottom-mobile: strip-unit($padding-bottom-mobile);
  $top: strip-unit($padding-top);
  $bottom: strip-unit($padding-bottom);

  padding-top: $top-mobile * 1px;
  padding-bottom: $bottom-mobile * 1px;

  overflow: hidden;

  @supports (padding: clamp(1px, 1%, 2px)) {
    padding-top: clamp($top-mobile * 1px, percentage(($top * 1px) / $page-width), $top * 1px);
    padding-bottom: clamp($bottom-mobile * 1px, percentage(($bottom * 1px) / $page-width), $bottom * 1px);
  }
}